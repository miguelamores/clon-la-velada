---
import type { HTMLAttributes } from "astro/types";
import type { Boxer } from "@/types/Boxer";

interface Props {
  boxers: Boxer[];
  class?: string;
  selectedBoxer: Boxer;
  imgLoading: HTMLAttributes<"img">["loading"];
}

const { boxers, class: className, selectedBoxer, imgLoading } = Astro.props;

const isAlly = (id: Boxer["id"]) => selectedBoxer.allies?.includes(id);

const hasSameOpponents = (
  selectedBoxerOpponents: string[],
  opponents: string[]
) =>
  selectedBoxerOpponents.every((sBoxerOpponent) =>
    opponents.includes(sBoxerOpponent)
  );

const isOpponent = (id: Boxer["id"], versus: Boxer["versus"]) => {
  const selectedBoxerOpponents = Array.isArray(selectedBoxer.versus)
    ? selectedBoxer.versus
    : [selectedBoxer.versus];

  const opponents = Array.isArray(versus) ? versus : [versus];

  return (
    selectedBoxerOpponents.includes(id) ||
    (hasSameOpponents(selectedBoxerOpponents, opponents) &&
      id !== selectedBoxer.id &&
      !isAlly(id))
  );
};
---

<div class:list={`flex flex-col ${className}`}>
  {
    boxers.map(
      ({ id, name, country, countryName, weight, rotate, versus, allies }) => (
        <a
          href={`/boxers/${id}`}
          class:list={[
            "boxer-link",
            {
              active: selectedBoxer.id === id,
              ally: isAlly(id),
              opponent: isOpponent(id, versus),
            },
          ]}
          title={`Visit the page of boxer ${name}`}
          data-id={id}
          data-name={name}
          data-country={country}
          data-country-name={countryName}
          data-weight={weight}
          data-opponents={versus}
          data-allies={allies}
        >
          <div class="boxer-link-background" />
          <img
            decoding="async"
            src={`/img/boxers/${id}-small.webp`}
            alt={`Small picture of boxer ${name}`}
            class:list={`boxer-image aspect-square h-full w-full object-contain ${rotate ? "rotate-y-180" : ""}`}
            loading={imgLoading}
          />
        </a>
      )
    )
  }
</div>

<style>
  .boxer-link {
    @apply relative mb-2 flex flex-col items-center justify-center transition-opacity duration-300 ease-in-out md:size-28 xl:size-36;

    &:hover {
      @apply opacity-90;
    }

    & .boxer-image {
      @apply z-20 h-full object-contain transition-opacity duration-300 ease-in-out;
      mask-image: linear-gradient(to bottom, black 85%, transparent 100%);
      filter: grayscale(100%);
      transition: filter 0.3s ease;
    }
  }

  .boxer-link-background {
    @apply absolute bottom-0 block h-3/5 w-full opacity-25 transition-opacity duration-300 ease-in-out;
    background: linear-gradient(
      180deg,
      rgba(255, 255, 255, 1) 0%,
      rgba(255, 255, 255, 0.5) 30%,
      rgba(0, 0, 0, 0) 95%
    );
  }

  .boxer-link:hover .boxer-image,
  .boxer-link.active .boxer-image {
    scale: 1.05;
    filter: grayscale(0%);
  }

  .boxer-link.ally {
    & .boxer-image {
      scale: 1.05;
    }

    &::after {
      content: "aliada";
      @apply pointer-events-none absolute bottom-0 z-50 font-stronger text-2xl text-green-500;
      text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    }
  }

  .boxer-link.opponent {
    & .boxer-image {
      scale: 1.05;
    }

    &::after {
      content: "versus";
      @apply pointer-events-none absolute bottom-0 z-50 font-stronger text-2xl text-red-500;
      text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
    }
  }

  .boxer-link:hover .boxer-link-background,
  .boxer-link.active .boxer-link-background {
    filter: brightness(0.5);
  }

  .rotate-y-180 {
    transform: rotateY(180deg);
  }
</style>
