---
import { MOBILE_MENU_CONTENT_ID } from '@/consts/mobile-menu';
const width = 'w-6';
const genericHamburgerLine = `h-[2px] ${width} bg-gray-300 transition ease transform duration-300`;
---

<button
  id={Astro.props.id}
  aria-expanded='false'
  aria-controls={MOBILE_MENU_CONTENT_ID}
  class:list={[
    'hamburgerButton group relative flex h-[20px] flex-col items-center justify-between lg:hidden',
    width,
  ]}
  aria-label='Abrir menú de navegación'
>
  <span
    class:list={[
      'group-[.open]:translate-y-2 group-[.open]:rotate-45',
      genericHamburgerLine,
    ]}
  >
  </span>
  <span class:list={['group-[.open]:opacity-0', genericHamburgerLine]}></span>
  <span class:list={['group-[.open]:opacity-0', genericHamburgerLine]}></span>
  <span
    class:list={[
      'group-[.open]:-translate-y-[0.6rem] group-[.open]:-rotate-45',
      genericHamburgerLine,
    ]}
  >
  </span>
</button>

<script>
  document.addEventListener('astro:page-load', () => {
    const hamburgerButton = document.querySelector('.hamburgerButton');

    document.querySelectorAll('.hamburgerButton').forEach(button => {
      button.addEventListener('click', () => {
        hamburgerButton?.classList.toggle('open');
        const isMenuOpen = hamburgerButton?.classList.contains('open');
        hamburgerButton?.setAttribute('aria-expanded', String(isMenuOpen));
        hamburgerButton?.setAttribute(
          'aria-label',
          isMenuOpen ? 'Cerrar menú de navegación' : 'Abrir menú de navegación'
        );
        const hamburgerButtonClick = new CustomEvent('hamburgerButtonClicked');
        hamburgerButton?.dispatchEvent(hamburgerButtonClick);
      });
    });

    if (hamburgerButton?.classList?.contains('open'))
      hamburgerButton?.classList?.remove('open');
  });
</script>
