---
import MapMarkerIcon from "@/icons/map-marker.astro";
import CalendarButton from "@/components/CalendarButton.astro";
---

<section
  class="mx-auto mt-16 flex animate-fade-in flex-col place-items-center text-center text-primary animate-delay-300 motion-reduce:animate-delay-[0s] motion-reduce:animate-duration-[0s] md:mt-32"
>
  <!-- <h2 class="uppercase text-5xl font-semibold">
    4 de marzo <span aria-hidden class="hidden md:inline">.</span><br
      aria-hidden
      class="block md:hidden"
    />
    <span>
      <script is:inline>
        import { EVENT_TIMESTAMP } from "@/consts/event-date";
        const END_DATE = 1712434473000;
        const d = new Date(EVENT_TIMESTAMP);
        const date = d.toLocaleTimeString("es", {
          hour: "2-digit",
          minute: "2-digit",
        });
        console.log({ date });

        // get current timezone
        const tzOffset = d.getTimezoneOffset() / 60;
        const diff = tzOffset * -1;
        const gmt = diff > 0 ? `GMT+${diff}` : `GMT-${Math.abs(diff)}`;

        const TZ_DICTIONARY = {
          "GMT+1": "CET",
        };

        const tz = TZ_DICTIONARY[gmt] ?? gmt;

        const selfScript = document.currentScript;
        selfScript.parentNode.innerHTML = `${date}H ${tz}`;
      </script>
    </span>
  </h2> -->

  <header class="text-3xl font-semibold uppercase md:text-5xl">
    <time class="date"></time>
    <span class="date-time-separator hidden">
      <span aria-hidden="true" class="mx-1 hidden md:inline">·</span>
      <br aria-hidden="true" class="block md:hidden" />
    </span>
    <time class="time"></time>
  </header>

  <h2
    class="mt-6 flex max-w-sm flex-col text-lg font-medium uppercase lg:text-2xl"
  >
    <a
      class="flex"
      href="https://maps.app.goo.gl/F1oAFhFjqnvTKtC18"
      target="_blank"
      rel="noopener"
      aria-label="ubicación del campo Santiago Bernabéu en google maps, se abrirá en una nueva pestaña"
    >
      <MapMarkerIcon class="mr-1 max-md:mt-1 md:mt-0.5 md:size-6" /> Estadio Santiago
      Bernabéu
    </a>
  </h2>

  <footer
    class="scroll-horizontal items-top mt-6 flex flex-col gap-9 md:flex-row"
  >
    <div class="flex flex-col items-center justify-center gap-y-2">
      <a
        class="button-style"
        aria-disabled="true"
        href="#"
        target="_blank"
        rel="noopener noreferrer"
        aria-label="entradas agotadas, se abrirá en una nueva pestaña"
      >
        <span> Comprar entradas </span>
      </a>
      <span class="text-accent">Próximamente</span>
    </div>
    <div>
      <CalendarButton />
    </div>
  </footer>
</section>

<style is:global>
  .button-style {
    background: transparent;
    border: none;
    padding: 10px 20px;
    display: inline-block;
    font-size: 20px;
    font-weight: 600;
    width: 20rem;
    text-transform: uppercase;
    cursor: pointer;
    transform: skew(-21deg);
    color: var(--color-primary);
    border: 2px solid var(--color-primary);
  }

  .button-style[aria-disabled="true"] {
    background: #666;
    color: #111;
    pointer-events: none;
    border-color: #666;
  }

  .button-style > span {
    display: inline-block;
    transform: skew(21deg);
  }

  .button-style::before {
    content: "";
    position: absolute;
    top: 0;
    bottom: 0;
    right: 100%;
    left: 0;
    background: var(--color-primary);
    opacity: 0;
    z-index: -1;
  }

  .button-style:hover {
    color: var(--color-secondary);
    scale: 1.1;
    transform: skew(-21deg);
  }

  .button-style:hover::before {
    left: 0;
    right: 0;
    opacity: 1;
  }

  @media (prefers-reduced-motion: no-preference) {
    .button-style {
      transition: scale 150ms ease-in-out;
    }

    .button-style::before {
      transition: all 0.5s;
    }
  }
</style>

<script>
  import { EVENT_TIMESTAMP, timeZoneAbbreviations } from "@/consts/event-date";

  function getUserTimeZone(): string {
    return Intl.DateTimeFormat().resolvedOptions().timeZone;
  }

  // Formatea la fecha del evento considerando la zona horaria del usuario
  function formatEventDate(timestamp: number, timeZone: string): string {
    const options: Intl.DateTimeFormatOptions = {
      day: "numeric",
      month: "long",
      timeZone,
    };
    return new Intl.DateTimeFormat("es-ES", options).format(
      new Date(timestamp)
    );
  }

  // Formatea la hora del evento con el nombre de la zona horaria, ajustándose al formato de 24 horas
  function formatEventTimeWithTimeZoneName(
    timestamp: number,
    timeZone: string
  ): string {
    const formattedTime = new Intl.DateTimeFormat("es-ES", {
      hour: "numeric",
      minute: "numeric",
      hour12: false,
      timeZone,
    }).format(new Date(timestamp));

    const timeZoneName =
      timeZoneAbbreviations[timeZone] ||
      new Intl.DateTimeFormat("es-ES", {
        timeZone,
        timeZoneName: "short",
      })
        .formatToParts(new Date(timestamp))
        .find((part) => part.type === "timeZoneName")?.value;

    return `${formattedTime} ${timeZoneName}`;
  }

  // Genera un datetime válido para el atributo 'datetime' del elemento <time>, respetando la zona horaria
  function formatValidDatetime(timestamp: number, timeZone: string): string {
    const options: Intl.DateTimeFormatOptions = {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
      timeZone,
      hour12: false,
    };
    return new Intl.DateTimeFormat("en-CA", options).format(
      new Date(timestamp)
    );
  }

  function updateUI(
    dateString: string,
    timeString: string,
    validDatetime: string,
    {
      showTime = true,
    }: {
      showTime?: boolean;
    }
  ) {
    const $dateSpan = document.querySelector(".date");
    const $timeSpan = document.querySelector(".time");
    const $dateSeparator = document.querySelector(".date-time-separator");

    if ($dateSpan != null) {
      $dateSpan.innerHTML = dateString;
      $dateSpan.setAttribute("datetime", validDatetime);
    }

    if ($timeSpan != null && showTime) {
      $timeSpan.innerHTML = timeString;
      $timeSpan.setAttribute("datetime", validDatetime);
      $dateSeparator?.classList.remove("hidden");
    }
  }

  function main() {
    const USER_TZ = getUserTimeZone();
    const formattedDate = formatEventDate(EVENT_TIMESTAMP, USER_TZ);
    const formattedTime = formatEventTimeWithTimeZoneName(
      EVENT_TIMESTAMP,
      USER_TZ
    );
    const validDatetime = formatValidDatetime(EVENT_TIMESTAMP, USER_TZ);

    updateUI(formattedDate, formattedTime, validDatetime, {
      showTime: true,
    });
  }

  document.addEventListener("DOMContentLoaded", main);

  // Verifica si el evento ya ha pasado
  const eventHasPassed = EVENT_TIMESTAMP < Date.now();
  if (eventHasPassed) {
    const addToCalendarBtn = document.getElementById("add-to-calendar");
    if (addToCalendarBtn) {
      addToCalendarBtn.remove();
    }
  }
</script>
