---
import { BOXERS } from "@/consts/boxers";
import { COUNTRIES } from "@/consts/countries";
import Typography from "@/components/Typography.astro";
import BoxerBigImage from "@/components/BoxerBigImage.astro";
import ColumnBoxers from "@/components/ColumnBoxers.astro";

const listOfBoxers = BOXERS.map((boxer) => {
  const { country } = boxer;
  const countryName = COUNTRIES[country]?.name || "";
  return { ...boxer, countryName };
});

const selectedBoxerId = Astro.url.searchParams.get("boxer");
const selectedBoxer =
  listOfBoxers.find(({ id }) => id === selectedBoxerId) || listOfBoxers[0];

const boxerColumns = [
  listOfBoxers.slice(0, 6),
  listOfBoxers.slice(6, 11),
  listOfBoxers.slice(11, 16),
  listOfBoxers.slice(16, 22),
];
---

<section class="my-40">
  <Typography
    as="h3"
    variant="stronger-title"
    color="primary"
    class:list={"text-center"}
    id="selectedBoxer"
  >
    CHOOSE YOUR FIGHTER
  </Typography>

  <Typography as="p" variant="body" color="neutral" class="mt-4 text-center">
    Conoce los detalles de cada boxeador
  </Typography>

  <div
    class="mt-8 flex flex-col items-center justify-center gap-8 md:mt-32 md:flex-row lg:mt-0"
  >
    <article
      class="relative flex w-full max-w-[70%] flex-col items-center justify-center md:absolute md:max-w-full lg:-mt-32"
    >
      <BoxerBigImage
        id={selectedBoxer.id}
        name={selectedBoxer.name}
        country={selectedBoxer.country}
        countryName={selectedBoxer.countryName}
        loading={selectedBoxerId ? "eager" : "lazy"}
      />
    </article>

    <div class="boxers-nav hidden w-full justify-between md:flex">
      <nav class="boxers-lists flex h-full justify-start gap-4 py-4">
        <ColumnBoxers
          boxers={boxerColumns[0]}
          selectedBoxer={selectedBoxer}
          imgLoading={!selectedBoxerId ? "lazy" : undefined}
        />
        <ColumnBoxers
          boxers={boxerColumns[1]}
          selectedBoxer={selectedBoxer}
          imgLoading={!selectedBoxerId ? "lazy" : undefined}
          class="mt-12"
        />
      </nav>

      <nav class="boxers-lists flex h-full justify-end gap-2 py-4">
        <ColumnBoxers
          boxers={boxerColumns[2]}
          selectedBoxer={selectedBoxer}
          class="mt-12"
          imgLoading={!selectedBoxerId ? "lazy" : undefined}
        />
        <ColumnBoxers
          boxers={boxerColumns[3]}
          selectedBoxer={selectedBoxer}
          imgLoading={!selectedBoxerId ? "lazy" : undefined}
        />
      </nav>
    </div>
  </div>

  <div
    class="-mt-20 flex flex-col items-center justify-center md:mt-32 md:hidden"
  >
    <div
      class="carousel mt-8 w-full max-w-[100vw] overflow-y-hidden overflow-x-scroll"
    >
      <div
        class="carousel-inner flex snap-x snap-mandatory overflow-y-hidden overflow-x-scroll"
      >
        {
          listOfBoxers.map((boxer, index) => (
            <div
              class:list={`carousel-item w-[40%] flex-shrink-0 snap-center px-2
                ${index === 0 ? "ml-[30%]" : ""}
                ${index === listOfBoxers.length - 1} ? "mr-[30%]" : ""
              `}
            >
              <ColumnBoxers boxers={[boxer]} selectedBoxer={selectedBoxer} />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>
<script>
  document.addEventListener("astro:page-load", () => {
    const boxerLinks = document.querySelectorAll(".boxer-link");
    const boxerNav = document.querySelector(".boxers-nav") as HTMLElement;

    if (!boxerNav) return;

    const boxerTitle = document.querySelector(
      ".boxer-title"
    ) as HTMLImageElement;
    const boxerPhoto = document.querySelector(
      ".boxer-photo"
    ) as HTMLPictureElement;
    const boxerCountry = document.querySelector(
      ".boxer-flag"
    ) as HTMLImageElement;

    const updatedSelectedBoxerId =
      localStorage.getItem("selected:boxer") ||
      new URLSearchParams(window.location.search).get("boxer") ||
      "el-mariana";

    const updatedSelectedBoxerElement: HTMLElement | null =
      document.querySelector(`.boxer-link[data-id=${updatedSelectedBoxerId}]`);

    if (updatedSelectedBoxerElement) {
      activateBoxer(
        updatedSelectedBoxerElement,
        updatedSelectedBoxerElement,
        boxerNav,
        true
      );
    }

    function activateBoxer(
      element: HTMLElement,
      link: HTMLElement,
      nav: HTMLElement,
      replaceUrl: boolean = false,
      showAlliesAndOpponents: boolean = true
    ) {
      if (element.classList.contains("active")) return;

      const {
        id,
        name,
        country,
        countryName,
        opponents = "",
        allies = "",
      } = element.dataset;

      if (!id || !name || !country || !countryName) return;

      const splitName = name.split(" ");
      const lastName = splitName.at(-1);
      const firstNames = splitName.slice(0, splitName.length - 1).join(" ");

      const spanNames = `
        <a href="/boxers/${id}" class="boxer-link underline-transition transition-all duration-300 hover:text-accent motion-reduce:transition-none">
          <span class="flex flex-col">
            <span class="text-4xl">${firstNames.toLocaleLowerCase()}</span>
            <span>${lastName?.toLocaleLowerCase()}</span>
          </span>
        </a>
      `;

      nav?.querySelector(".active")?.classList.remove("active");
      nav
        ?.querySelectorAll(".opponent")
        ?.forEach((opponentEl) => opponentEl.classList.remove("opponent"));
      nav
        ?.querySelectorAll(".ally")
        ?.forEach((allyEl) => allyEl.classList.remove("ally"));

      link.classList.add("active");

      if (showAlliesAndOpponents) {
        allies.split(",").map((ally) => {
          boxerLinks.forEach((link) => {
            if (link.dataset.id === id) {
              link.classList.add("ally");
            }
          });
        });

        opponents.split(",").map((opponent) => {
          boxerLinks.forEach((link) => {
            const { id: linkId, opponents: linkOpponents } = link.dataset;
            if (
              linkId === opponent ||
              (linkOpponents === opponent && linkId !== id)
            ) {
              link.classList.add("opponent");
            }
          });
        });
      }

      if (replaceUrl) {
        history.replaceState({}, "", `?boxer=${id}`);
      }

      const boxerSrc = `/img/boxers/${id}-big`;
      boxerPhoto.getElementsByTagName("img")[0].src = `${boxerSrc}.webp`;
      boxerTitle.innerHTML = spanNames;
      boxerCountry.src = `/img/flags/${country}.webp`;
      boxerPhoto.getElementsByTagName("img")[0].alt = `Picture of ${name}`;
      boxerCountry.alt = `Flag of ${countryName}`;
    }

    boxerLinks.forEach((link) => {
      link.addEventListener("click", (event) => {
        const currentTarget = event.currentTarget as HTMLElement;
        const boxerId = currentTarget.getAttribute("data-id");
        if (boxerId)
          localStorage.setItem("selected:boxer", JSON.stringify(boxerId));
        activateBoxer(currentTarget, currentTarget, boxerNav, true);
      });
    });

    boxerLinks.forEach((link) => {
      link.addEventListener("mouseenter", (event) => {
        const currentTarget = event.currentTarget as HTMLElement;
        if (currentTarget.classList.contains("active")) return;
        activateBoxer(currentTarget, link, boxerNav, true);
      });
    });

    const carouselInner = document.querySelector(
      ".carousel-inner"
    ) as HTMLElement;

    const mobileMediaQuery = window.matchMedia("(max-width: 768px)");

    function highlightBoxer(link: HTMLAnchorElement) {
      const rect = link.getBoundingClientRect();
      const { width: carouselWidth } = carouselInner.getBoundingClientRect();

      if (
        rect.left > carouselWidth / 2 - rect.width * 0.75 &&
        rect.left < carouselWidth / 2 + rect.width * 0.25
      ) {
        activateBoxer(link, link, carouselInner, false, false);
      }
    }

    function highlightActiveBoxer() {
      boxerLinks.forEach((link) => {
        highlightBoxer(link);
      });
    }

    function updateActiveThumbnailPosition() {
      const boxer = new URLSearchParams(window.location.search).get("boxer");
      const boxerActiveElement = document.querySelector(
        `.carousel .boxer-link[data-id=${boxer}]`
      ) as HTMLAnchorElement;

      if (boxerActiveElement) {
        const carouselWidth = carouselInner.clientWidth; // width without paddings, margins, borders and scroll
        const thumbnailWidth = boxerActiveElement.offsetWidth; // width includes paddings, margins, borders and scroll
        const currentPosition =
          boxerActiveElement.offsetLeft - (carouselWidth - thumbnailWidth) / 2;

        carouselInner.scrollTo(currentPosition, 0);
      }
    }

    if (mobileMediaQuery.matches) {
      updateActiveThumbnailPosition();

      carouselInner.addEventListener("scroll", () => {
        highlightActiveBoxer();
      });
    }
  });
</script>

<style>
  .boxers-lists {
    @apply relative w-screen overflow-x-scroll md:overflow-hidden;
    scrollbar-width: none;
  }

  @media (min-width: 1280px) {
    .boxers-lists {
      @apply h-auto w-full max-w-none overflow-hidden py-2;
    }
  }

  @media (max-width: 768px) {
    .carousel {
      scrollbar-width: none;
    }

    .carousel::-webkit-scrollbar {
      display: none;
    }

    .carousel-inner {
      transition: transform 0.3s ease-in-out;
      scrollbar-width: none;
    }

    .carousel-inner::-webkit-scrollbar {
      display: none;
    }

    .carousel-item {
      transition: opacity 0.3s ease-in-out;
    }

    .carousel-item.active {
      opacity: 1;
      scale: 1.2;
    }
  }
</style>
